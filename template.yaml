AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31

Description: >
  Serverless application to automate AWS WorkMail creation and cancellation.


Metadata:
  AWS::ServerlessRepo::Application:
    Name: workmail-automation
    Description: Serverless application to automate AWS WorkMail creation and cancellation.

Parameters:
  Stage:
    Type: String
    Default: ""
    AllowedValues: ["", "dev", "stage", "test"]
    Description: Stage name for the API Gateway
  TokenSecretName:
    Type: String
    Description: Name of the Secrets Manager secret for the token
  DbSecretArn:
    Type: String
    Description: ARN of the Secrets Manager secret for the database
  DbClusterArn:
    Type: String
    Description: ARN of the RDS cluster
  DbName:
    Type: String
    Description: Name of the database
  KeapBaseUrl:
    Type: String
    Default: "https://api.infusionsoft.com/crm/rest/v1"
    Description: Base URL for the Keap API
  KeapApiKeySecretName:
    Type: String
    Description: Name of the Secrets Manager secret for the Keap API key
  KeapTag:
    Type: String
    Default: "3153"
    Description: Keap tag to apply to contact when WorkMail is created
  VpcId:
    Type: String
    Description: ID of the VPC for the Lambda functions
  SubnetIds:
    Type: List<String>
    Description: List of subnet IDs for the Lambda functions
  SecurityGroupIds:
    Type: List<String>
    Description: List of security group IDs for the Lambda functions

Globals:
  Function:
    Timeout: 300
    Runtime: python3.12
    MemorySize: 256

Conditions:
  IsProduction: !Equals [ !Ref Stage, "" ]

Resources:
  # API Gateway to trigger workflow
  WorkMailApi:
    Type: AWS::Serverless::HttpApi
    Properties:
      Name: WorkMailApi
      CorsConfiguration:
        AllowHeaders: "*"
        AllowMethods: "POST"
        AllowOrigins: "*"
      StageName: !If [IsProduction, "$default", !Ref Stage]

  # Lambda function acting as authorizer
  AuthorizerFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: authorizer_function/
      Handler: app.lambda_handler
      Layers:
        - !Ref WorkmailCommonLayer
      Policies:
        - AWSLambdaBasicExecutionRole
        - AWSLambdaVPCAccessExecutionRole
        - Statement:
            - Effect: Allow
              Action:
                - secretsmanager:GetSecretValue
              Resource: "*"
      Environment:
        Variables:
          TOKEN_SECRET_NAME: !Ref TokenSecretName
      VpcConfig:
        SecurityGroupIds: !Ref SecurityGroupIds
        SubnetIds: !Ref SubnetIds

  # Permission to allow API Gateway to invoke AuthorizerFunction
  InvokeAuthorizerPermission:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !Ref AuthorizerFunction
      Action: lambda:InvokeFunction
      Principal: apigateway.amazonaws.com
      SourceArn: !Sub "arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${WorkMailApi.ApiId}/*"

  # Permission to allow API Gateway to invoke Integration
  InvokeIntegrationPermission:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !Ref StartCreateWorkMailWorkflowFunction
      Action: lambda:InvokeFunction
      Principal: apigateway.amazonaws.com
      SourceArn: !Sub "arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${WorkMailApi.ApiId}/*"

  # Authorizer for the API Gateway
  WorkMailAuthorizer:
    Type: AWS::ApiGatewayV2::Authorizer
    Properties:
      Name: WorkMailAuthorizer
      ApiId: !Ref WorkMailApi
      AuthorizerType: REQUEST
      AuthorizerUri: !Sub "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${AuthorizerFunction.Arn}/invocations"
      AuthorizerPayloadFormatVersion: "2.0"
      IdentitySource:
        - "$request.header.Authorization"
      EnableSimpleResponses: true

  # Route with attached authorizer
  CreateApiRoute:
    Type: AWS::ApiGatewayV2::Route
    Properties:
      ApiId: !Ref WorkMailApi
      RouteKey: "POST /workmail/create"
      AuthorizationType: CUSTOM
      AuthorizerId: !Ref WorkMailAuthorizer
      Target: !Sub "integrations/${StartCreateWorkMailWorkflowIntegration}"

  # Integration to connection Api Gateway to Labmda
  StartCreateWorkMailWorkflowIntegration:
    Type: AWS::ApiGatewayV2::Integration
    Properties:
      ApiId: !Ref WorkMailApi
      IntegrationType: AWS_PROXY
      IntegrationUri: !Sub "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${StartCreateWorkMailWorkflowFunction.Arn}/invocations"
      PayloadFormatVersion: "2.0"

  # Lambda function that triggers Step Functions
  StartCreateWorkMailWorkflowFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: start_create_workmail_workflow_function/
      Handler: app.lambda_handler
      PackageType: Zip
      Layers:
        - !Ref WorkmailCommonLayer
      Policies:
        - AWSLambdaBasicExecutionRole
        - AWSLambdaVPCAccessExecutionRole
        - AWSXRayDaemonWriteAccess
        - Statement:
          - Effect: "Allow"
            Action:
              - states:StartExecution
            Resource:
              - !Ref WorkMailStepFunction
      Environment:
        Variables:
          WORKMAIL_STEPFUNCTION_ARN: !Ref WorkMailStepFunction
      VpcConfig:
        SecurityGroupIds: !Ref SecurityGroupIds
        SubnetIds: !Ref SubnetIds

  # Execution role for the Step Function
  WorkMailStepFunctionExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: "Allow"
            Principal:
              Service:
                - "states.amazonaws.com"
            Action:
              - "sts:AssumeRole"
      Policies:
        - PolicyName: "WorkMailStepFunctionExecutionPolicy"
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: "Allow"
                Action:
                  - lambda:InvokeFunction
                Resource: "*"
              - Effect: "Allow"
                Action:
                  - logs:*
                Resource: "*"

  # Step Function to orchestrate the WorkMail creation process
  WorkMailStepFunction:
    Type: AWS::StepFunctions::StateMachine
    Properties:
      RoleArn: !GetAtt WorkMailStepFunctionExecutionRole.Arn
      DefinitionString:
        !Sub |
          {
            "Comment": "Orchestrate WorkMail creation",
            "StartAt": "CreateWorkMailOrgFunction",
            "States": {
              "CreateWorkMailOrgFunction": {
                "Type": "Task",
                "Resource": "arn:aws:lambda:${AWS::Region}:${AWS::AccountId}:function:${CreateWorkMailOrgFunction}",
                "Next": "WaitForDomainVerification",
                "ResultPath": "$.createWorkMailOrgResult",
                "Catch": [
                  {
                    "ErrorEquals": ["States.ALL"],
                    "Next": "HandleError"
                  }
                ]
              },
              "WaitForDomainVerification": {
                "Type": "Wait",
                "Seconds": 300,
                "Next": "CheckDomainVerificationFunction"
              },
              "CheckDomainVerificationFunction": {
                "Type": "Task",
                "Resource": "arn:aws:lambda:${AWS::Region}:${AWS::AccountId}:function:${CheckDomainVerificationFunction}",
                "Next": "IsDomainVerified",
                "InputPath": "$.createWorkMailOrgResult",
                "ResultPath": "$.domainVerificationResult",
                "Catch": [
                  {
                    "ErrorEquals": ["States.ALL"],
                    "Next": "HandleError"
                  }
                ]
              },
              "IsDomainVerified": {
                "Type": "Choice",
                "Choices": [
                  {
                    "Variable": "$.domainVerificationResult.domainVerified",
                    "BooleanEquals": true,
                    "Next": "CreateWorkMailUserFunction"
                  }
                ],
                "Default": "WaitForDomainVerification"
              },
              "CreateWorkMailUserFunction": {
                "Type": "Task",
                "Resource": "arn:aws:lambda:${AWS::Region}:${AWS::AccountId}:function:${CreateWorkMailUserFunction}",
                "InputPath": "$.createWorkMailOrgResult",
                "End": true,
                "Catch": [
                  {
                    "ErrorEquals": ["States.ALL"],
                    "Next": "HandleError"
                  }
                ]
              },
              "HandleError": {
                "Type": "Fail",
                "Error": "CreateWorkMailWorkflowError",
                "Cause": "An error occurred in the WorkMail creation process"
              }
            }
          }
      LoggingConfiguration:
        Level: ALL
        IncludeExecutionData: true
        Destinations:
          - CloudWatchLogsLogGroup:
              LogGroupArn: !GetAtt WorkMailStepFunctionLogGroup.Arn

  # Log group for the Step Function
  WorkMailStepFunctionLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub "/aws/vendedlogs/states/${AWS::StackName}-WorkMailStepFunction"
      RetentionInDays: 30

  # Lambda function to create the workmail organization and register the domain
  CreateWorkMailOrgFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: create_workmail_org_function/
      Handler: app.lambda_handler
      PackageType: Zip
      Layers:
        - !Ref WorkmailCommonLayer
      Policies:
        - AWSLambdaBasicExecutionRole
        - AWSLambdaVPCAccessExecutionRole
        - AWSXRayDaemonWriteAccess
        - Statement:
          - Effect: "Allow"
            Action:
              - ds:AuthorizeApplication
              - ds:CreateAlias
              - ds:CreateIdentityPoolDirectory
              - ds:DescribeDirectories
              - ds:ListAuthorizedApplications
              - ses:CreateReceiptRule
              - ses:DescribeActiveReceiptRuleSet
              - ses:GetIdentityDkimAttributes
              - ses:GetIdentityPolicies
              - ses:GetIdentityVerificationAttributes
              - ses:PutIdentityPolicy
              - ses:SetIdentityEmailNotificationEnabled
              - ses:UpdateReceiptRule
              - ses:VerifyDomainDkim
              - ses:VerifyDomainIdentity
              - workmail:CreateOrganization
              - workmail:DescribeOrganization
              - workmail:GetMailDomain
              - workmail:RegisterDomain
              - workmail:RegisterMailDomain
            Resource: "*"
          - Effect: "Allow"
            Action: secretsmanager:GetSecretValue
            Resource:
              - !Ref DbSecretArn
              - "*" # TODO: Change KeapApiSecretName to KeapApiSecretArn and replace this
      Environment:
        Variables:
          DB_SECRET_ARN: !Ref DbSecretArn
          DB_CLUSTER_ARN: !Ref DbClusterArn
          DATABASE_NAME: !Ref DbName
          SNS_BOUNCE_ARN: !Ref SnsBounceTopic
          SNS_COMPLAINT_ARN: !Ref SnsComplaintTopic
          SNS_DELIVERY_ARN: !Ref SnsDeliveryTopic
          KEAP_TAG: !Ref KeapTag
          KEAP_API_KEY_SECRET_NAME: !Ref KeapApiKeySecretName
          KEAP_BASE_URL: !Ref KeapBaseUrl
      VpcConfig:
        SecurityGroupIds: !Ref SecurityGroupIds
        SubnetIds: !Ref SubnetIds

  # Lambda function to check DNS and domain status
  CheckDomainVerificationFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: check_domain_verification_function/
      Handler: app.lambda_handler
      PackageType: Zip
      Layers:
        - !Ref WorkmailCommonLayer
      Policies:
        - AWSLambdaBasicExecutionRole
        - AWSLambdaVPCAccessExecutionRole
        - AWSXRayDaemonWriteAccess
        - Statement:
          - Effect: "Allow"
            Action:
              - workmail:DescribeOrganization
              - workmail:DescribeDomain
            Resource: "*"
          - Effect: "Allow"
            Action:
              - secretsmanager:GetSecretValue
            Resource: !Ref DbSecretArn
      VpcConfig:
        SecurityGroupIds: !Ref SecurityGroupIds
        SubnetIds: !Ref SubnetIds

  # Lambda function to create the WorkMail User
  CreateWorkMailUserFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: create_workmail_user_function/
      Handler: app.lambda_handler
      PackageType: Zip
      Layers:
          - !Ref WorkmailCommonLayer
      Policies:
        - AWSLambdaBasicExecutionRole
        - AWSLambdaVPCAccessExecutionRole
        - AWSXRayDaemonWriteAccess
        - Statement:
          - Effect: Allow
            Action:
              - workmail:CreateUser
              - workmail:DescribeUser
              - workmail:DescribeOrganization
            Resource: "*"
      Environment:
        Variables:
          DB_SECRET_ARN: !Ref DbSecretArn
          DB_CLUSTER_ARN: !Ref DbClusterArn
          DATABASE_NAME: !Ref DbName
          SNS_BOUNCE_ARN: !Ref SnsBounceTopic
          SNS_COMPLAINT_ARN: !Ref SnsComplaintTopic
          SNS_DELIVERY_ARN: !Ref SnsDeliveryTopic
          KEAP_TAG: !Ref KeapTag
          KEAP_API_KEY_SECRET_NAME: !Ref KeapApiKeySecretName
          KEAP_BASE_URL: !Ref KeapBaseUrl
      VpcConfig:
        SecurityGroupIds: !Ref SecurityGroupIds
        SubnetIds: !Ref SubnetIds

  # Lambda function to delete a WorkMail organization
  DeleteWorkMailOrgFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: delete_workmail_org_function/
      Handler: app.lambda_handler
      PackageType: Zip
      Layers:
        - !Ref WorkmailCommonLayer
      Events:
        CancelApi:
          Type: HttpApi
          Properties:
            Path: /workmail/cancel
            Method: POST
            ApiId: !Ref WorkMailApi
      Policies:
        - AWSLambdaBasicExecutionRole
        - AWSLambdaVPCAccessExecutionRole
        - Statement:
            - Effect: Allow
              Action: secretsmanager:GetSecretValue
              Resource: !Ref DbSecretArn
              Condition:
                StringEqualsIfExists:
                  secretsmanager:VersionStage: "AWSCURRENT"
            - Effect: Allow
              Action: rds-data:ExecuteStatement
              Resource: !Ref DbClusterArn
            - Effect: Allow
              Action: cloudformation:DeleteStack
              Resource: "*"
      Environment:
        Variables:
          DB_SECRET_ARN: !Ref DbSecretArn
          DB_CLUSTER_ARN: !Ref DbClusterArn
          DATABASE_NAME: !Ref DbName
          SNS_BOUNCE_ARN: !Ref SnsBounceTopic
          SNS_COMPLAINT_ARN: !Ref SnsComplaintTopic
          SNS_DELIVERY_ARN: !Ref SnsDeliveryTopic
      VpcConfig:
        SecurityGroupIds: !Ref SecurityGroupIds
        SubnetIds: !Ref SubnetIds

  WorkmailCommonLayer:
    Type: AWS::Serverless::LayerVersion
    Properties:
      LayerName: "WorkmailCommonLayer"
      Description: "Common code for Lambda functions"
      ContentUri: layers/common/
      CompatibleRuntimes:
        - python3.12

  SnsBounceTopic:
    Type: AWS::SNS::Topic
    Properties:
      DisplayName: "SES Bounce Notifications"
      TopicName: Bounce

  SnsComplaintTopic:
    Type: AWS::SNS::Topic
    Properties:
      DisplayName: "SES Complaint Notifications"
      TopicName: Complaint

  SnsDeliveryTopic:
    Type: AWS::SNS::Topic
    Properties:
      DisplayName: "SES Delivery Notifications"
      TopicName: Delivery


Outputs:
  SnsBounceTopicArn:
    Description: ARN of the Bounce SNS Topic
    Value: !Ref SnsBounceTopic
    Export:
      Name: SnsBounceTopicArn

  SnsComplaintTopicArn:
    Description: ARN of the Complaint SNS Topic
    Value: !Ref SnsComplaintTopic
    Export:
      Name: SnsComplaintTopicArn

  SnsDeliveryTopicArn:
    Description: ARN of the Delivery SNS Topic
    Value: !Ref SnsDeliveryTopic
    Export:
      Name: SnsDeliveryTopicArn

  CreateApiUrl:
    Description: URL for the Create API
    Value: !If
      - IsProduction
      - !Sub "${WorkMailApi.ApiEndpoint}/workmail/create"
      - !Sub "${WorkMailApi.ApiEndpoint}/${Stage}/workmail/create"
    Export:
      Name: CreateApiUrl

  CancelApiUrl:
    Description: URL for the Cancel API
    Value: !If
      - IsProduction
      - !Sub "${WorkMailApi.ApiEndpoint}/workmail/cancel"
      - !Sub "${WorkMailApi.ApiEndpoint}/${Stage}/workmail/cancel"
    Export:
      Name: CancelApiUrl